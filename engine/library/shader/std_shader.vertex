in vec3 vertex_position;
in vec2 vertex_UV;
in vec3 vertex_normal;
in vec3 vertex_tangent;

uniform mat3 normal_to_view_matrix;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec2 uv;
out vec3 normal;
out vec3 view_position;
out mat3 tangent_to_view_matrix;
out mat4 view_matrix;

#if NUM_DIRECTIONAL_LIGHTS > 0
	uniform mat4 shadow_map_view_projection_matrix[NUM_DIRECTIONAL_LIGHTS];
	out vec3 shadow_map_space_position[NUM_DIRECTIONAL_LIGHTS];
#endif

void main() {
	vec4 world_position4 = model * vec4(vertex_position, 1.0);
	vec4 view_position4 = view * world_position4;
	
	gl_Position = projection * view_position4;
	uv = vertex_UV;
	normal = normal_to_view_matrix * vertex_normal;
	view_position = view_position4.xyz;
	vec3 tangent = normal_to_view_matrix * vertex_tangent;
	tangent_to_view_matrix = mat3(tangent, cross(tangent, normal), normal);
	
	view_matrix = view;
	
	#if NUM_DIRECTIONAL_LIGHTS > 0
		for(int i = 0; i < NUM_DIRECTIONAL_LIGHTS; ++i) {
			shadow_map_space_position[i] = (shadow_map_view_projection_matrix[i] * world_position4).xyz;
		}
	#endif
}
